package streams

object SolWS {
  case class Pos(x: Int, y: Int) {
    def dx(d: Int) = copy(x = x + d, y)
    def dy(d: Int) = copy(x, y = y + d)
  }
  
  sealed abstract class Move
  case object Left  extends Move
  case object Right extends Move
  case object Up    extends Move
  case object Down  extends Move
  
  type Terrain = Pos => Boolean
  val level1str =
      """ooo-------
        |oSoooo----
        |ooooooooo-
        |-ooooooooo
        |-----ooToo
        |------ooo-""".stripMargin                //> level1str  : String = ooo-------
                                                  //| oSoooo----
                                                  //| ooooooooo-
                                                  //| -ooooooooo
                                                  //| -----ooToo
                                                  //| ------ooo-
  val level1 = Vector(level1str.split("\r?\n").map(str => Vector(str: _*)): _*)
                                                  //> level1  : scala.collection.immutable.Vector[scala.collection.immutable.Vecto
                                                  //| r[Char]] = Vector(Vector(o, o, o, -, -, -, -, -, -, -), Vector(o, S, o, o, o
                                                  //| , o, -, -, -, -), Vector(o, o, o, o, o, o, o, o, o, -), Vector(-, o, o, o, o
                                                  //| , o, o, o, o, o), Vector(-, -, -, -, -, o, o, T, o, o), Vector(-, -, -, -, -
                                                  //| , -, o, o, o, -))
  def terrainFunction(levelVector: Vector[Vector[Char]]): Pos => Boolean =
   pos => pos.x < levelVector.length && pos.x >= 0 &&
          pos.y < levelVector(0).length & pos.y >= 0 &&
          levelVector(pos.x)(pos.y) != '-'        //> terrainFunction: (levelVector: Vector[Vector[Char]])streams.SolWS.Pos => Boo
                                                  //| lean
  val terrain = terrainFunction(level1)           //> terrain  : streams.SolWS.Pos => Boolean = <function1>
  
  case class Block(b1: Pos, b2: Pos) {
    require(b1.x <= b2.x && b1.y <= b2.y, "Invalid block position: b1=" + b1 + ", b2=" + b2)
    def dx(d1: Int, d2: Int) = Block(b1.dx(d1), b2.dx(d2))
    def dy(d1: Int, d2: Int) = Block(b1.dy(d1), b2.dy(d2))
    def left = if (isStanding)         dy(-2, -1)
               else if (b1.x == b2.x)  dy(-1, -2)
               else                    dy(-1, -1)
    def right = if (isStanding)        dy(1, 2)
                else if (b1.x == b2.x) dy(2, 1)
                else                   dy(1, 1)
    def up = if (isStanding)           dx(-2, -1)
             else if (b1.x == b2.x)    dx(-1, -1)
             else                      dx(-1, -2)
    def down = if (isStanding)         dx(1, 2)
               else if (b1.x == b2.x)  dx(1, 1)
               else                    dx(2, 1)
    def neighbors: List[(Block, Move)] =
      (left, Left) :: (right, Right) :: (up, Up) :: (down, Down) :: Nil
    def legalNeighbors: List[(Block, Move)] = neighbors.filter(p => p._1.isLegal)
     def isStanding: Boolean = b1 == b2
    def isLegal: Boolean = terrain(b1) && terrain(b2)
  }
  
  def findChar(c: Char, levelVector: Vector[Vector[Char]]): Pos = {
    val x = levelVector.indexWhere(v => v.contains(c))
    val y = levelVector(x).indexOf(c)
    Pos(x,y)
  }                                               //> findChar: (c: Char, levelVector: Vector[Vector[Char]])streams.SolWS.Pos
  
  def neighborsWithHistory(b: Block, history: List[Move]): Stream[(Block, List[Move])] =
    b.legalNeighbors.map({case (bl, m) => (bl, m :: history)}).toStream
                                                  //> neighborsWithHistory: (b: streams.SolWS.Block, history: List[streams.SolWS.
                                                  //| Move])Stream[(streams.SolWS.Block, List[streams.SolWS.Move])]
  def newNeighborsOnly(neighbors: Stream[(Block, List[Move])], explored: Set[Block]): Stream[(Block, List[Move])] =
    neighbors.filter({case (bl, m) => !explored.contains(bl)})
                                                  //> newNeighborsOnly: (neighbors: Stream[(streams.SolWS.Block, List[streams.Sol
                                                  //| WS.Move])], explored: Set[streams.SolWS.Block])Stream[(streams.SolWS.Block,
                                                  //|  List[streams.SolWS.Move])]
  
  val spl1 = findChar('S',level1)                 //> spl1  : streams.SolWS.Pos = Pos(1,1)
  val sbl1 = Block(spl1,spl1)                     //> sbl1  : streams.SolWS.Block = Block(Pos(1,1),Pos(1,1))
}