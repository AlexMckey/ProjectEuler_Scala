object tmp {
	def checkPalindrom(i: Int) = i.toString == i.toString.reverse
                                                  //> checkPalindrom: (i: Int)Boolean
	checkPalindrom(9009)                      //> res0: Boolean = true
	val l = (100 to 999)                      //> l  : scala.collection.immutable.Range.Inclusive = Range(100, 101, 102, 103, 
                                                  //| 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 1
                                                  //| 19, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 13
                                                  //| 4, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149
                                                  //| , 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164,
                                                  //|  165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 
                                                  //| 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 1
                                                  //| 95, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 21
                                                  //| 0, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225
                                                  //| , 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
                                                  //|  241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 
                                                  //| 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 2
                                                  //| 71, 272, 273, 274, 275, 
                                                  //| Output exceeds cutoff limit.
	val fl = for (i <- l; j <- l) yield i*j   //> fl  : scala.collection.immutable.IndexedSeq[Int] = Vector(10000, 10100, 1020
                                                  //| 0, 10300, 10400, 10500, 10600, 10700, 10800, 10900, 11000, 11100, 11200, 113
                                                  //| 00, 11400, 11500, 11600, 11700, 11800, 11900, 12000, 12100, 12200, 12300, 12
                                                  //| 400, 12500, 12600, 12700, 12800, 12900, 13000, 13100, 13200, 13300, 13400, 1
                                                  //| 3500, 13600, 13700, 13800, 13900, 14000, 14100, 14200, 14300, 14400, 14500, 
                                                  //| 14600, 14700, 14800, 14900, 15000, 15100, 15200, 15300, 15400, 15500, 15600,
                                                  //|  15700, 15800, 15900, 16000, 16100, 16200, 16300, 16400, 16500, 16600, 16700
                                                  //| , 16800, 16900, 17000, 17100, 17200, 17300, 17400, 17500, 17600, 17700, 1780
                                                  //| 0, 17900, 18000, 18100, 18200, 18300, 18400, 18500, 18600, 18700, 18800, 189
                                                  //| 00, 19000, 19100, 19200, 19300, 19400, 19500, 19600, 19700, 19800, 19900, 20
                                                  //| 000, 20100, 20200, 20300, 20400, 20500, 20600, 20700, 20800, 20900, 21000, 2
                                                  //| 1100, 21200, 21300, 21400, 21500, 21600, 21700, 21800, 21900, 22000, 22100, 
                                                  //| 22200, 22300, 22400, 225
                                                  //| Output exceeds cutoff limit.
  val p = fl.filter(checkPalindrom)               //> p  : scala.collection.immutable.IndexedSeq[Int] = Vector(10201, 11211, 12221
                                                  //| , 13231, 14241, 15251, 16261, 17271, 18281, 19291, 20402, 21412, 22422, 2343
                                                  //| 2, 24442, 25452, 26462, 27472, 28482, 29492, 30603, 31613, 32623, 33633, 346
                                                  //| 43, 35653, 36663, 37673, 38683, 39693, 40804, 41814, 42824, 43834, 44844, 45
                                                  //| 854, 46864, 47874, 48884, 49894, 20502, 21012, 41514, 42024, 62526, 63036, 8
                                                  //| 3538, 84048, 21012, 26162, 42024, 47174, 63036, 68186, 84048, 89198, 21112, 
                                                  //| 27872, 42224, 48984, 63336, 80808, 84448, 88088, 50505, 53235, 55755, 58485,
                                                  //|  21412, 23532, 25652, 27772, 29892, 40704, 42824, 44944, 25252, 45154, 65056
                                                  //| , 73937, 93839, 27972, 29592, 46764, 48384, 63936, 65556, 67176, 82728, 8434
                                                  //| 8, 15151, 64746, 74447, 79897, 84148, 89598, 99299, 11211, 12321, 13431, 145
                                                  //| 41, 15651, 16761, 17871, 18981, 20202, 21312, 22422, 23532, 24642, 25752, 26
                                                  //| 862, 27972, 30303, 31413, 32523, 33633, 34743, 35853, 36963, 40404, 41514, 4
                                                  //| 2624, 43734, 44844, 4595
                                                  //| Output exceeds cutoff limit.
  p.max                                           //> res1: Int = 906609
}